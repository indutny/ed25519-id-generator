#!/usr/bin/env node

const cluster = require('cluster');
const id = require('ed25519-id');

if (cluster.isMaster) {
  const argv = require('yargs')
      .alias('p', 'prefix')
      .alias('j', 'jobs')
      .describe('prefix', 'output representation prefix')
      .describe('jobs', 'number of concurrent jobs')
      .number('jobs')
      .demand('prefix')
      .argv;

  const os = require('os');
  const ProgressBar = require('progress');

  const CPU_COUNT = argv.jobs || os.cpus().length;
  const SEARCH_SPACE = Math.pow(27, argv.prefix.length +  1);

  const progress = new ProgressBar(
    ':bar :current/:total :probability% :etas :rate ops/sec',
    {
      width: 60,
      total: SEARCH_SPACE
    }
  );

  let lastTotal = 0;
  function report() {
    let total = 0;
    for (let i = 0; i < counts.length; i++)
      total += counts[i];

    const delta = total - lastTotal;
    lastTotal = total;
    while (total >= progress.total)
      progress.total *= 2;

    let p = (1 - Math.pow(1 - 1 / SEARCH_SPACE, total)) * 100;
    progress.tick(delta, {
      probability: p.toFixed(2)
    });
  }

  const counts = new Array(CPU_COUNT).fill(0);
  for (let i = 0; i < CPU_COUNT; i++) {
    const worker = cluster.fork();
    worker.send({ prefix: argv.prefix });
    worker.on('message', (msg) => {
      if (msg.type === 'result') {
        console.log(JSON.stringify(msg.payload, null, 2));
        process.exit(0);
      } else if (msg.type === 'status') {
        const counter = msg.payload;
        counts[i] = counter;
        report();
      }
    });
  }
  return;
}

const signatures = require('sodium-signatures');
process.on('message', (config) => {
  let start = process.hrtime();
  const pair = id.generate(config.prefix, () => signatures.keyPair(), {
    reportEvery: 10000,
    report: (counter) => {
      process.send({
        type: 'status',
        payload: counter
      });
    }
  });

  process.send({
    type: 'result',
    payload: {
      secretKey: pair.secretKey.toString('hex'),
      publicKey: pair.publicKey.toString('hex'),
      id: id.stringify(pair.publicKey, config.prefix.length)
    }
  });
});
